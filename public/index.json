[{"content":"Hello There. I have been thinking in sharing my thoughts. I do not consider myself a good writer nor a good software engineer, but I like to sit in silence and think about what I do. I hope you enjoy it.\n","permalink":"https://dolfo.codes/posts/hello-world/","summary":"Hello There. I have been thinking in sharing my thoughts. I do not consider myself a good writer nor a good software engineer, but I like to sit in silence and think about what I do. I hope you enjoy it.","title":"Hello World"},{"content":"Many times as a Software Engineer you might have realized you grown your toolset of skills and feel you deserve a promotion. However, during the promotion cycle, your manager gave you feedback that for you to get promoted you need to grow others around you. This statement might have puzzled you, since when has your performance as an individual contributor had anything to do with other people? It is called the Individual Contributor path for a reason, no?\nWhile you may excel in your technical skills and abilities, it\u0026rsquo;s important to remember that most software engineering positions involve working with a team. Collaboration between developers, product managers, and designers can lead to better products and make you a valuable member of the team.\nTeamwork Series We can define Software Engineering as the union of people, processes, and products to enable the continuous delivery of value to our end users. There can be no promotion if the team does not grow with it.\n\u0026ldquo;Teamwork\u0026rdquo; is a series of posts where I will be sharing my learnings from topics surrounding working with teams like Team Cohesion, Coaching and Mentoring, Delegating and Sponsoring, and others from the perspective of an Engineering Manager. These tools will allow you to support and lead your tech team grow with you.\nDelegating and Sponsoring In the dynamic world of software engineering, effective leadership transcends beyond just managing tasks and projects. It involves mastering the arts of delegation and sponsorship \u0026ndash; two pivotal skills that can significantly enhance team performance, foster professional growth, and drive innovation.\nUnderstanding when and how to delegate tasks, as well as how to sponsor and advocate for your team members, can set you apart as a leader in the tech industry. Delegation and sponsorship share some similarities in their focus on developing team members and enhancing team performance, but they also have distinct differences in their approach and objectives.\nDelegating Delegation is more than just assigning tasks; it\u0026rsquo;s entrusting responsibility and authority to team members to complete those tasks. It\u0026rsquo;s a strategic tool that enables leaders to manage their workload more efficiently, while simultaneously empowering team members, enhancing their skills, and fostering a sense of trust and accountability within the team.\nDelegation empowers team members by entrusting them with important tasks, which boosts their confidence and engagement. It allows team members to develop new skills and expertise, preparing them for more significant roles in the future. And by delegating, leaders can distribute workloads more evenly, ensuring that tasks are completed by those with the most appropriate skills and bandwidth.\nDelegate Effectively Effective delegation requires choosing the right tasks to delegate, selecting the appropriate team members based on their skills and development needs, providing clear instructions, and offering support and feedback throughout the process.\nChoose the Right Tasks: Not all tasks are suitable for delegation. Choose tasks that contribute to team members\u0026rsquo; growth and are aligned with their skills and career aspirations. Select the Right People: Consider the skills, interests, and developmental needs of your team members when delegating tasks. Provide Clear Expectations: Clearly communicate the task objectives, deadlines, and any relevant information to ensure understanding and alignment. Empower with Authority: Ensure that team members have the authority and resources they need to complete the task successfully. Monitor Progress and Provide Feedback: Check in periodically to monitor progress, offer guidance, and provide constructive feedback. Sponsorship Sponsorship goes beyond mentorship; it involves actively advocating for and investing in the professional development of team members. A sponsor not only offers guidance and support but also uses their influence to open doors and create opportunities for those they sponsor.\nSponsors use their influence to open doors, provide high-profile opportunities, and ensure that the accomplishments and potential of the individuals they support are recognized at decision-making levels.\nSponsorship can play a critical role in the career advancement of team members by providing them with visibility and opportunities. Feeling supported and having clear career advancement opportunities can significantly improve team member retention. Effective sponsorship can help break down barriers and promote diversity and inclusion within leadership roles.\nSponsor Effectively This role is crucial for career development and often involves a personal commitment to the sponsored individual\u0026rsquo;s success, making it a powerful tool for promoting talent within the organization, especially for underrepresented groups.\nIdentify Talent: Look for team members who show potential, commitment, and a drive to grow within the company. Provide Opportunities: Offer challenging projects, introduce them to key stakeholders, and involve them in high-visibility tasks. Advocate: Use your influence to advocate for your protégés, recommending them for promotions, recognitions, and important assignments. Offer Guidance: Provide constructive feedback and advice to help them navigate their career paths and professional challenges. Support Their Visibility: Ensure that the achievements and potential of those you sponsor are visible to senior leadership. Differences Though both delegation and sponsorship aim to develop team members and enhance team performance, they differ in several key aspects:\nScope and Focus: Delegation is task-oriented; it\u0026rsquo;s about assigning specific tasks or projects to team members. Sponsorship is relationship-oriented, focusing on the long-term career development of the individual and often involves a personal commitment to their success.\nLevel of Involvement: In delegation, once a task is assigned, the leader typically steps back, providing guidance and support as needed but allowing the team member to take ownership. In sponsorship, the leader is actively involved in advocating for the individual\u0026rsquo;s career advancement, which includes creating opportunities and promoting their achievements within the organization.\nVisibility: Delegation primarily operates within the context of the team or project, with the delegated tasks and outcomes being visible to the immediate team or department. Sponsorship aims to increase the individual\u0026rsquo;s visibility on a broader scale, often involving senior leadership and decision-makers across the organization.\nObjective: The primary objective of delegation is to enhance efficiency and team capability, ensuring that the right tasks are matched with the right skills, and leaders can focus on strategic areas. Sponsorship, however, is primarily focused on advancing the individual\u0026rsquo;s career, helping them to secure promotions, gain new experiences, and enhance their professional network.\nConclusion As a leader in software engineering, balancing delegation and sponsorship is key to developing a high-performing, motivated, and loyal team. Delegation helps in building a self-reliant team capable of handling tasks with minimal supervision, while sponsorship ensures team members have the opportunities and support they need to advance their careers.\nBy mastering these two essential skills, you not only enhance your leadership capabilities but also contribute to creating an empowering and inclusive work environment that values growth, innovation, and diversity. Remember, the success of your team is a reflection of your success as a leader.\n","permalink":"https://dolfo.codes/posts/delegating-sponsoring/","summary":"Many times as a Software Engineer you might have realized you grown your toolset of skills and feel you deserve a promotion. However, during the promotion cycle, your manager gave you feedback that for you to get promoted you need to grow others around you. This statement might have puzzled you, since when has your performance as an individual contributor had anything to do with other people? It is called the Individual Contributor path for a reason, no?","title":"Delegating and Sponsoring"},{"content":"Many times as a Software Engineer you might have realized you grown your toolset of skills and feel you deserve a promotion. However, during the promotion cycle, your manager gave you feedback that for you to get promoted you need to grow others around you. This statement might have puzzled you, since when has your performance as an individual contributor had anything to do with other people? It is called the Individual Contributor path for a reason, no?\nWhile you may excel in your technical skills and abilities, it\u0026rsquo;s important to remember that most software engineering positions involve working with a team. Collaboration between developers, product managers, and designers can lead to better products and make you a valuable member of the team.\nTeamwork Series We can define Software Engineering as the union of people, processes, and products to enable the continuous delivery of value to our end users. There can be no promotion if the team does not grow with it.\n\u0026ldquo;Teamwork\u0026rdquo; is a series of posts where I will be sharing my learnings from topics surrounding working with teams like Team Cohesion, Coaching and Mentoring, Delegating and Sponsoring, and others from the perspective of an Engineering Manager. These tools will allow you to support and lead your tech team grow with you.\nMentoring and Coaching In this post, I want to talk about the differences and practical approach to mentor and coach. Even though they are similar, they are situational depending not only on the person you are working with but your own experience and needs of the individual. We can define mentoring as the act of sharing your experience and knowledge with someone to create a learning environment. On the other hand, coaching is the act of guiding someone with open question to find the answers to their own questions.\nMy learnings During early times as an engineering manager at Pivotal, I had the opportunity to meet Lara Hogan, author of the book Resilient Management. In this book, she talks about the different tools you have as a leader to help your team grow.\nThis book and her working sessions helped me understand the difference between mentoring and coaching, and the difference between being encouraging and being direct when it comes to the interactions you have with reports about their work. In this post I will focus on the first part, mentoring and coaching.\nWhat is mentorship? The goal of mentorship is to bring a different perspective to the subject of a topic you have experience with. Usually you explain by example what you did in their position and what was the tradeoff you observed and let the subject absorb and assimilate the situation they are in with your story.\nIn order to mentor you need experience in the field of the mentee’s problem. If this is not a possibility, you might need to find someone in the team that could mentor the person.\nWhat\u0026rsquo;s coaching? Coaching is when you navigate the subject in their own thoughts and help them ask the right questions so they map the path from the problem to the possible solutions. You create the environment so that the individual can get the right information from their own experience.\nThis is why if you are an expert of the domain you might lean the questions to your past experiences and deviate from the individual experience and thoughts. It is easier to coach when you do not know the domain of the person you are coaching.\nWhat to keep in mind while mentoring and coaching When mentoring and coaching, it is important to keep in mind the following key points:\nFeedback. Providing feedback is an important part of coaching and mentoring. You should provide constructive feedback that helps the individual improve and grow.\nEmpathy. It is important to be empathetic when coaching or mentoring someone. You need to understand their perspective and be supportive of their goals and aspirations.\nGoal Setting. Coaching and Mentoring are about helping the individual set and achieve their goals. You should help them identify their goals and come up with a plan to achieve them.\nAccountability. You should hold the individual accountable for their actions and help them stay on track with their goals.\nTrust. Building trust is crucial when coaching or mentoring someone. You need to create a safe and supportive environment where the individual feels comfortable sharing their thoughts and experiences.\nCoaching Key Points When coaching someone, particularly in a professional setting, there are several key points to pay attention to ensure the process is effective and beneficial for the individual being coached. Here are some crucial aspects to consider:\nActive Listening. This is the most important aspect of coaching. You need to listen to the person you are coaching and understand their perspective. This will help you ask the right questions and guide them in the right direction.\nOpen-Ended Questions. When coaching, you should ask open-ended questions that encourage the individual to think and reflect on their experiences. This will help them come up with their own solutions and ideas.\nMentoring Key Points Mentoring is different from coaching in that it is more about sharing your experiences and knowledge with the individual. Here are some key points to consider when mentoring someone:\nSharing Experiences. Mentoring is about sharing your experiences and knowledge with the individual. You should provide guidance and advice based on your own experiences.\nRole Modeling. As a mentor, you should be a role model for the individual. You should demonstrate the behaviors and skills that you want the individual to develop.\nSupport. Mentoring is about providing support and guidance to the individual. You should be there to help them navigate their challenges and achieve their goals.\nA Practical approach | The Framework Like most problems of two variables, we can create a 2x2 table to help us understand when to use mentoring and coaching.\nYou know the domain You don\u0026rsquo;t know the domain The individual knows the domain Mentor/Coach Coach The individual doesn\u0026rsquo;t know the domain Mentor Coach You don\u0026rsquo;t know the domain and the individual knows the domain The advice is to coach. This might the best situation for bias since you are not an expert in the domain they need help with.\nEven if the coachee is more knowledgeable in a certain area, a coach can still facilitate growth and development by asking powerful questions, providing feedback, and helping the coachee explore new perspectives and solutions.\nYou know the domain and the individual doesn\u0026rsquo;t know the domain The advice is to mentor. You can share your experiences and knowledge with the individual to help them grow and develop in the domain they are not familiar with.\nYou can provide specific guidance, share knowledge, and offer advice based on their expertise, which is particularly beneficial for someone less experienced in the domain.\nYou don\u0026rsquo;t know the domain and the individual doesn\u0026rsquo;t know the domain The advice is to coach.\nWhen both parties are less experienced in a specific domain, you can still effectively support the individual\u0026rsquo;s development through goal setting, accountability, and facilitating self-discovery, rather than direct knowledge transfer.\nYou know the domain and the individual knows the domain In this scenario you are advice to utilize advanced mentoring or coaching and peer mentoring.\nIn scenarios where both parties are highly experienced, the relationship can focus on advanced or niche topics by coaching or mentoring the details, with the possibility of mutual learning (peer mentoring).\nConclusion Mentoring and coaching are both important tools for helping individuals grow and develop. They are similar in many ways, but they are also different and should be used in different situations. By understanding the differences between mentoring and coaching, and when to use each, you can effectively support the growth and development of the individuals you work with.\nIn the next post, I will be talking about the importance of Delegating and Sponsoring in the growth of your team.\nReferences Resilient Management by Lara Hogan. ","permalink":"https://dolfo.codes/posts/mentoring-coaching-sponsorship/","summary":"Many times as a Software Engineer you might have realized you grown your toolset of skills and feel you deserve a promotion. However, during the promotion cycle, your manager gave you feedback that for you to get promoted you need to grow others around you. This statement might have puzzled you, since when has your performance as an individual contributor had anything to do with other people? It is called the Individual Contributor path for a reason, no?","title":"Coaching and Mentoring"},{"content":"In the realm of software development, Test-Driven Development (TDD) often elicits a spectrum of opinions. Some view it as a hindrance, others as the solution. And, like every extreme opinion about any topic, it is wrong to think in absolutes, we are not Sith.\nMy journey with TDD began with Kent Beck\u0026rsquo;s book, \u0026ldquo;Test Driven Development by Example,\u0026rdquo; during my Ruby on Rails learning phase. Here, I share my insights, hoping to demystify TDD and its practicality in software development.\nCommon Misconceptions about TDD I have made a lot of mistakes while learning TDD, and like others, I have had misconceptions about it like:\nTest Coverage and the overuse of Unit Tests TDD is not about achieving 100% test coverage or exhausting yourself with unit tests. It\u0026rsquo;s about driving the key aspects like public contracts and business logic, primarily in the Service and API layers, with tests. Overemphasis on test coverage as a code health metric is misleading. Instead, focus on code behavior.\nYou should test what users care about not how the code is written.\nOver-Isolation in Testing Test isolation is crucial, but it\u0026rsquo;s about ensuring tests don\u0026rsquo;t interfere with each other, not excessively mocking dependencies. Over-mocking can lead to missed dependency updates.\nTDD and Clarity of Purpose TDD is most effective when you have a clear understanding of what you\u0026rsquo;re developing. If the project\u0026rsquo;s direction is unclear, it\u0026rsquo;s better to return to the planning stage rather than jump straight into coding. Testing a tool that helps you write better code, but it\u0026rsquo;s not a substitute for good design.\nTesting for User-Centric Behavior Focus your tests on what matters to users, not on the intricacies of code implementation. TDD helps in validating the correctness and behavior of applications, offering rapid and reliable feedback throughout the software lifecycle.\nTesting and Non-functional requirements When refactoring or dealing with performance and implementation changes, breaking tests can indicate either a shift in logic or a flaw in the test itself. Effective Refactoring should guide you to improve code without altering its behavior, and effective TDD focus on aligning with user needs rather than implementation specifics.\nTDD in System Design TDD is closely linked with system design more than the implmentation details of your application. It\u0026rsquo;s a cycle of understanding new requirements, designing solutions, writing tests to validate these designs, and then coding to fulfill them. TDD is not just about writing software; it\u0026rsquo;s about ensuring that software aligns with user needs and system requirements.\nThe Future of TDD For me, this is one of the areas where Artificial Inteligence can help developers build better software as a testing companion for each project. AI can significantly enhance TDD by automating the generation of test cases. Machine learning algorithms can analyze code and generate tests that cover a wide range of scenarios, including edge cases that developers might not anticipate. This automation can lead to more thorough and efficient testing processes.\nTest Driven Development is not a panacea, nor is it a stumbling block. It\u0026rsquo;s a tool for creating reliable, user-focused software. It prompts us to test behaviors that matter and avoid getting bogged down in implementation details. Embracing TDD means embracing a mindset of continuous improvement and clear focus on what truly benefits the end-user.\n","permalink":"https://dolfo.codes/posts/test-drive-development/","summary":"In the realm of software development, Test-Driven Development (TDD) often elicits a spectrum of opinions. Some view it as a hindrance, others as the solution. And, like every extreme opinion about any topic, it is wrong to think in absolutes, we are not Sith.\nMy journey with TDD began with Kent Beck\u0026rsquo;s book, \u0026ldquo;Test Driven Development by Example,\u0026rdquo; during my Ruby on Rails learning phase. Here, I share my insights, hoping to demystify TDD and its practicality in software development.","title":"My Perspective on Test-Driven Development (TDD)"},{"content":"\u0026ldquo;What are your weaknesses?\u0026quot;—One of the most mocked questions in the interview process. People often joke about it and often have nothing interesting to say. More often than not, individuals use this opportunity to brag or express how much effort they are willing to put in to go the extra mile.\nPeople struggle to provide good answers to this question because they don’t often take the time to sit and think about their weaknesses. Growing involves being aware of these weaknesses, which is part of the path to becoming a better person.\nI ask this question during interview to understand if people are aware of the challenging aspects of working with them and, more importantly, if they are actively working to improve those situations. However, let me share mine.\nWhen I feel frustrated, my lack of trust and patience becomes evident in my work relationships, sometimes to the extent that it can affect the teams I work with and my leadership. In extreme cases, this frustration manifests as cynical behavior, typically directed at leadership after prolonged frustration from stagnation. I often mask it with dark humor, but I find relief through meditation and running to clear my mind of these thoughts. I encourage those working with me to call me out if they notice such behavior.\nInitially, these raw comments might seem brave, bold, or even revealing of some truth. However, they are often negative and lack actionable steps to steer things in the right direction, merely reflecting my frustration. Over time, this repetitive behavior drains people\u0026rsquo;s energy and leads them to view me as irritating and uncooperative.\nThe most troubling aspect of this weakness, and the reason I\u0026rsquo;m actively working on it, is that it contradicts who I aspire to be. My goal is to be a kind and empathetic leader, yet these frustrations lead to behaviors that directly oppose this goal. They put me in a position where my relationships are laden with negative thoughts, not only impacting how others perceive me but also harming the teams I work with and becoming the subjects of my thoughts.\nI\u0026rsquo;m working hard to ensure this doesn\u0026rsquo;t become a defining part of my identity, or at least not for prolonged periods. I acknowledge that some aspects of life or work are beyond my control, and frustration is inevitable. Nevertheless, I am committed to maintaining kindness and empathy even during these challenging times.\nUltimately, it\u0026rsquo;s acceptable to have weaknesses and actively work on improving them. If you believe you have none, it\u0026rsquo;s likely because you haven\u0026rsquo;t deeply reflected on it. None of us are perfect. By acknowledging weaknesses, we can minimize their impact. In the next interview, offering a concrete example of your weaknesses can provide the interviewer a glimpse into your growth journey toward becoming a better person.\nThe next time you have a moment for introspection, ask yourself about the most challenging aspect of working with you and what steps you can take to improve it. However, you must genuinely desire to uncover these answers by being open and honest with yourself.\n","permalink":"https://dolfo.codes/posts/weakness/","summary":"\u0026ldquo;What are your weaknesses?\u0026quot;—One of the most mocked questions in the interview process. People often joke about it and often have nothing interesting to say. More often than not, individuals use this opportunity to brag or express how much effort they are willing to put in to go the extra mile.\nPeople struggle to provide good answers to this question because they don’t often take the time to sit and think about their weaknesses.","title":"Weakness"},{"content":"Many times as a Software Engineer you might have realized you grown your toolset of skills and feel you deserve a promotion. However, during the promotion cycle, your manager gave you feedback that for you to get promoted you need to grow others around you. This statement might have puzzled you, since when has your performance as an individual contributor had anything to do with other people? It is called the Individual Contributor path for a reason, no?\nWhile you may excel in your technical skills and abilities, it\u0026rsquo;s important to remember that most software engineering positions involve working with a team. Collaboration between developers, product managers, and designers can lead to better products and make you a valuable member of the team.\nTeamwork Series We can define Software Engineering as the union of people, processes, and products to enable the continuous delivery of value to our end users. There can be no promotion if the team does not grow with it.\n\u0026ldquo;Teamwork\u0026rdquo; is a series of posts where I will be sharing my learnings from topics surrounding working with teams like Team Cohesion, Coaching and Mentoring, Delegating and Sponsoring, and others from the perspective of an Engineering Manager. These tools will allow you to support and lead your tech team grow with you.\nTeam Cohesion In my first post, I will be talking about Team Cohesion especially working on agile development. Teamwork plays a crucial role in agile, an approach to software development that emphasizes continuous delivery, iterative development, and the ability to quickly respond to change.\nIn an agile team, everyone works together closely to create high-quality software products. According to the Society for Human Resource Management, teamwork and collaboration are one of the top skills that employers look for in job candidates. Therefore, to achieve success as a Software Engineer, you need to work well with others.\nFor everyone working together, team members need to click like pieces of a clock to move the arms in sync. But we are all different. We have different backgrounds, different personalities, and different ways of working. But, we need to find a way to coordinate our efforts in a direction that works for everyone despite our different strengths and weaknesses including unique ways of communicating, learning, and growing.\nWhat can the team do? There are times when team members might not be able to work together as a team. This is where the role of an Engineering Manager comes in. The Engineering Manager is responsible for ensuring that the team is working together effectively and efficiently. One of the most important skills that an Engineering Manager needs to have is to build team cohesion. Team cohesion is the degree to which team members are attracted to, motivated by, and committed to the team. It is the glue that holds the team together, and the reason why people stay in a team and work together to achieve a common goal. Let\u0026rsquo;s talk about some of the tools that could help you build team cohesion.\nTeam user manual One of the tools that an Engineering Manager can use to build team cohesion is the team user manual. The team user manual is a document that describes the team\u0026rsquo;s culture, values, and processes. It is a living document that is constantly updated and improved, and It is shared with all team members and stakeholders. It is a document that is used to onboard new team members and to help them understand the team\u0026rsquo;s culture and processes.\nThe process of building one requires the inclusion of all team members, and how do we achieve it? We need to start by asking all team members to write their user manuals. The manual describes the team member\u0026rsquo;s preferred way of working, communicating, learning, and growing. If you want to see an example of one, here is mine.\nOnce all team members have written their user manuals, the Engineering Manager needs to review them and consolidate them into one document. The document should be shared with all team members and stakeholders. It is important to note that the team user manual is not a static document. It is a living document that is constantly updated and improved.\nWe can describe the team user manual as the common set of rules that the team members follow to work together effectively and efficiently without stepping on each other\u0026rsquo;s toes or forcing others to change their ways of working. It deletes bias from leadership and includes everyone in the process of building the team.\nTeam Charter Another tool that an Engineering Manager can use to build team cohesion is the team charter. The team charter is a document that describes the team\u0026rsquo;s mission, vision, and values. It is another living document that is constantly updated and improved, and It is shared with all team members and stakeholders. The team charter is built with the input of the 3 main users of a team: the team members, the stakeholders, and the customers.\nThe sections of this document include the purpose of the team, the team\u0026rsquo;s mission statement, the team\u0026rsquo;s values, and the engineering principles to follow in the software engineering process. It should describe who are the customers and the market research done to understand their needs. You can also include the structure of the team and relevant information like the team user manual.\nFinally, it roadmaps the strategy and the actions the team will take in the next 3 to 6 months to solve these needs. One of the most efficient ways to drive this effort is with the Object Key Results methodology.\nThis document is a living document that is constantly updated and improved when any of its parts pivots or there are new learnings from the customers. It is a document that is used to onboard new team members and to help them understand the team\u0026rsquo;s mission, vision, and values. It is also used to communicate with stakeholders and customers about the team\u0026rsquo;s strategy and the actions the team will take. The Team Charter connects the stakeholders, the customers, and the team members on a common goal.\nTeam Roadmap Now that we know the rules of the team and the team\u0026rsquo;s purpose, let\u0026rsquo;s talk about the product that they build. To build cohesion in the team, the team members need to know what they are working on and what they are planning to do next. We split this into blocks of work called sprints.\nThis is where the team roadmap comes in. The team roadmap is a document that describes the team\u0026rsquo;s product strategy and the actions the team will take in the next release to improve the product they are working on.\nWith the roadmap, we can estimate the amount of work the team will be able to deliver for each sprint. We can also estimate the amount of time it will take to deliver the features. It also helps the stakeholders to understand the team\u0026rsquo;s progress and to know what they can expect from the team in the next release.\nAt any given moment every team member can read the roadmap and understand the priorities the team has and what is the next most valuable thing to work on. The roadmap also helps the leadership of the team surface any blockers or risks that might prevent the team from delivering the features on time. It also helps them set confidence levels for the team\u0026rsquo;s progress.\nEffective Communication Something worst than not collaborating is collaborating poorly. Effective communication is the key to building team cohesion. It is the key to building trust and making sure that everyone is on the same page, and making sure that everyone is working on the most valuable thing to work on.\nWe need to communicate in a way that is clear, concise, and actionable.\nSet clear expectations: Ensure that everyone on the team understands their roles and responsibilities and the expected outcomes. This helps to avoid misunderstandings and ensures that everyone is working towards the same goals.\nFoster an open-door policy: Encourage team members to approach each other with any questions or concerns they may have. Creating a safe environment where team members feel comfortable sharing their thoughts and ideas is crucial for effective collaboration.\nUse the right communication channels: Different situations call for different communication channels. For example, instant messaging may be more appropriate for quick questions or asynchronous updates, while synchronous meetings may be better for more detailed information and discussions. Utilizing the appropriate communication channels can help to ensure that messages are delivered and received promptly.\nPractice active listening: Communication is a two-way street, and effective listening is just as important as effective speaking. Encourage team members to actively listen to each other, ask clarifying questions, and provide feedback.\nProvide regular updates: Regular check-ins can help to keep everyone informed of the team\u0026rsquo;s progress and any changes in direction. This helps to avoid surprises and allows team members to adjust their work accordingly.\nConclusion In this post, we talked about the importance of team cohesion in agile development. We also talked about the tools that you can use to build team cohesion and grow the team around you. To collaborate effectively we need to understand who we are, how we want to work, what are the most valuable objectives to work on, and how are we going to communicate to update each other. In my next post, I will be talking about Coaching and Mentoring and how to do it effectively. I will also be talking about the different types of coaching and mentoring and how to choose the right one for your team.\nReferences The Agile Manifesto Developing and Sustaining High-Performance Work Teams The 5 Dysfunctions of a Team ","permalink":"https://dolfo.codes/posts/teamwork-collaboration/","summary":"Many times as a Software Engineer you might have realized you grown your toolset of skills and feel you deserve a promotion. However, during the promotion cycle, your manager gave you feedback that for you to get promoted you need to grow others around you. This statement might have puzzled you, since when has your performance as an individual contributor had anything to do with other people? It is called the Individual Contributor path for a reason, no?","title":"Teamwork - Team Cohesion"}]